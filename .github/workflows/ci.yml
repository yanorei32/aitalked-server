name: CI

on:
  push:
    branches:
      - 'master'
    tags:
      - v*

env:
  CARGO_INCREMENTAL: 0
  RUST_CACHE_VERSION: v1
  PROJ_NAME: aitalked-server

jobs:
  release_linux:
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        include:
          - ghimage: ubuntu-24.04
            os: windows
            arch: i686
            target: i686-pc-windows-gnu

    permissions:
      contents: write

    runs-on: ${{ matrix.ghimage }}

    steps:
      - uses: actions/checkout@v5.0.0
        with:
          submodules: true

      - if: ${{ matrix.target == 'i686-pc-windows-gnu' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-mingw-w64-i686
          rustup target add i686-pc-windows-gnu

      - name: Install cargo license
        run: |
          cargo install cargo-license

      - uses: Swatinem/rust-cache@v2.8.1
        with:
          prefix-key: ${{ env.RUST_CACHE_VERSION }}-rust

      - name: Build
        env:
          TARGET: ${{ matrix.target }}
        run: |
          cargo build --release --target $TARGET

      - name: Create CREDITS file
        env:
          TARGET: ${{ matrix.target }}
        run: |
          cargo license \
            --authors \
            --do-not-bundle \
            --avoid-dev-deps \
            --filter-platform $TARGET \
              > CREDITS

      - name: Make release file
        env:
          TARGET: ${{ matrix.target }}
          OUTPUT: ${{ matrix.output }}
        run: |
          DIR_NAME="${{ env.PROJ_NAME }}-${{ matrix.os }}-${{ matrix.arch }}-${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('master-{0}', github.sha) }}"
          mkdir "$DIR_NAME"

          # Copy executables from target folder to release directory
          find ./target/$TARGET/release/ -maxdepth 1 -exec file {} \; |
            grep executable |
            awk '{ print $1 }' |
            sed -e "s/:$//g" |
            while read f; do
              cp "$f" "$DIR_NAME/"
            done

          cp ./LICENSE "$DIR_NAME/"
          cp ./CREDITS "$DIR_NAME/"
          cp ./README.md "$DIR_NAME/"
          tar cvf "$DIR_NAME.tar.gz" "$DIR_NAME/"

      - name: pre-release
        uses: softprops/action-gh-release@v2.3.3
        if: "! startsWith(github.ref, 'refs/tags/')"
        with:
          tag_name: master-${{ github.sha }}
          prerelease: true
          fail_on_unmatched_files: true
          files: |
            *.tar.gz

      - name: tagged-release
        uses: softprops/action-gh-release@v2.3.3
        if: startsWith(github.ref, 'refs/tags/')
        with:
          fail_on_unmatched_files: true
          files: |
            *.tar.gz


  clippy_and_test:
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        include:
          - ghimage: ubuntu-24.04

    permissions:
      packages: write
      checks: write
      contents: read
      deployments: write

    runs-on: ${{ matrix.ghimage }}

    steps:
      - uses: actions/checkout@v5.0.0

      - run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-mingw-w64-i686
          rustup target add i686-pc-windows-gnu

      - name: Get Rust toolchain
        id: toolchain
        run: |
          awk -F'[ ="]+' '$1 == "channel" { print "toolchain=" $2 }' rust-toolchain >> "$GITHUB_OUTPUT"

      - name: install clippy
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.toolchain.outputs.toolchain }}
          components: clippy

      - name: cache dependencies
        uses: Swatinem/rust-cache@v2.8.1
        with:
          prefix-key: ${{ env.RUST_CACHE_VERSION }}-rust

      - name: clippy check
        uses: yanorei32/action-clippy@50412b135153ebee7d4b8a5b868c4defdc663683
        with:
          reporter: github-check

      - name: release build
        run: cargo build --release
